# --- das zu testende System hat 12 logische Prozessoren ---

Architecture:             x86_64
  CPU op-mode(s):         32-bit, 64-bit
  Address sizes:          39 bits physical, 48 bits virtual
  Byte Order:             Little Endian
CPU(s):                   12
  On-line CPU(s) list:    0-11
Vendor ID:                GenuineIntel
  Model name:             Intel(R) Core(TM) i7-8700K CPU @ 3.70GHz

#define NUM_OPERATIONS 100000000000 
#define NUM_THREADS 4 

Ergebnisse:
Dauer: 91.460426 Sekunden
FLOPS: 1.093369e+09

#define NUM_OPERATIONS 100000000000 
#define NUM_THREADS 12

Ergebnisse:
Dauer: 93.401231 Sekunden
FLOPS: 1.070650e+09
 
- warum ist das so?
- meine Vermutung: mehr Overhead durch das pure erstellen, Verwalten und Synchronisieren der Threads
- Tests mit 4, 6 und 8 durchführen um Optimum zu ermitteln

# --- 6 ---
#define NUM_OPERATIONS 100000000000 
#define NUM_THREADS 6

Ergebnisse:
Dauer: 93.350407 Sekunden
FLOPS: 1.071233e+09

# --- 8 ---
#define NUM_OPERATIONS 100000000000 
#define NUM_THREADS 8

Ergebnisse:
Dauer: 93.344827 Sekunden
FLOPS: 1.071297e+09

# --- 2 ---
Ergebnisse:
Dauer: 88.610236 Sekunden
FLOPS: 1.128538e+09




# --- versuchen, Threads auf spezifische Kerne zu binden ---

eui@Forensik-Kali:~/PVS$ taskset -c 0-3 ./flop_messung_multithread_8
Ergebnisse:
Dauer: 91.415094 Sekunden
FLOPS: 1.093911e+09

eui@Forensik-Kali:~/PVS$ taskset -c 0-3 ./flop_messung_multithread_6
Ergebnisse:
Dauer: 91.459752 Sekunden
FLOPS: 1.093377e+09

eui@Forensik-Kali:~/PVS$ taskset -c 0-3 ./flop_messung_multithread_4
Ergebnisse:
Dauer: 91.575852 Sekunden
FLOPS: 1.091991e+09

eui@Forensik-Kali:~/PVS$ taskset -c 0-3 ./flop_messung_multithread_2
Ergebnisse:
Dauer: 88.447885 Sekunden
FLOPS: 1.130609e+09

- ok, hier wird es langsam interessant, wenn ich auf spezifische Kerne binde, ist auf einmal das Ergebnis von 8 Threads um zwei Sekunden besser geworden

- um jetzt zu gucken ob es nur am Overhead liegt, nehmen wir einfach noch eine größere Menge an Operationen
- für 4, 6 und 8

Operationen: 1000000000000 (eine Null mehr als zuvor)
eui@Forensik-Kali:~/PVS$ taskset -c 0-3 ./flop_messung_multithread_4
Ergebnisse:
Dauer: 914.861208 Sekunden
FLOPS: 1.093062e+09

eui@Forensik-Kali:~/PVS$ taskset -c 0-3 ./flop_messung_multithread_6
Ergebnisse:
Dauer: 915.151161 Sekunden
FLOPS: 1.092716e+09

eui@Forensik-Kali:~/PVS$ taskset -c 0-3 ./flop_messung_multithread_8
Ergebnisse:
Dauer: 914.954200 Sekunden
FLOPS: 1.092951e+09

# --- und noch einmal für mehre Kerne ---
eui@Forensik-Kali:~/PVS$ taskset -c 0-5 ./flop_messung_multithread_4
Ergebnisse:
Dauer: 914.526393 Sekunden
FLOPS: 1.093462e+09

eui@Forensik-Kali:~/PVS$ taskset -c 0-5 ./flop_messung_multithread_6
Ergebnisse:
Dauer: 934.231830 Sekunden
FLOPS: 1.070398e+09

eui@Forensik-Kali:~/PVS$ taskset -c 0-5 ./flop_messung_multithread_8
Ergebnisse:
Dauer: 933.069716 Sekunden
FLOPS: 1.071731e+09


- zumindest für einfache Operationen a * b scheinen 2-4 Threads, der optimale Workload zu sein
- Ursache war also nicht der Overhead



- dann habe ich das Ganze mal auf meinem Rechner ausgeführt, dann habe ich alle meiner Ergebnisse infrage gestellt
#define NUM_OPERATIONS 10000000000000000000  
#define NUM_THREADS 16 
- eine Null mehr wäre Integer Limit 

Ergebnisse:
Dauer: 3.289000 Sekunden
FLOPS: 3.040438e+18

#define NUM_OPERATIONS 10000000000000000000  // Anzahl der Operationen
#define NUM_THREADS 2  

Ergebnisse:
Dauer: 2.886000 Sekunden
FLOPS: 3.465003e+18

- ich muss ehrlich sagen, ich kann die Ergebnisse nicht wirklich interpretieren
Option 1, hier verwende ich eine IDE, irgendetwas landet im Cache
Option 2, meine CPU kann FLOPs einfach besser, aber warum dieser wirklich krasse Zeitunterschied
Option 3, irgenwelche Optimierungen von der IDE Bewirken eine extreme Bewschleunigung

- mein System: AMD Ryzen 7 5800X 8-Core Processor, 3801 MHz, 8 Kern(e), 16 logische(r) Prozessor(en)
- geliehener Laptop von der Hochschule 6 Kerne, 12 logische Prozessoren


- dann habe ich die CMake Datei angepasst, um Optimierungen "zu verhindern"

cmake_minimum_required(VERSION 3.10)
project(MyProject)

# Compiler-Standard festlegen
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Build-Typ Debug und keine Optimierungen
set(CMAKE_BUILD_TYPE Debug)
set(CMAKE_C_FLAGS_DEBUG "-O0")
set(CMAKE_CXX_FLAGS_DEBUG "-O0")

# Linker-Optimierungen deaktivieren
set(CMAKE_EXE_LINKER_FLAGS "-fno-lto")

# Quellen hinzufügen
add_executable(MyProject main.cpp)

- jedoch mit gleichem Ergebnis
- meine Vermutung: es liegt an der IDE, obwohl meine CPU neuer ist, als die im Laptop
- ich müsste mir vielleicht noch WSL einrichten um das gegenzuprüfen







